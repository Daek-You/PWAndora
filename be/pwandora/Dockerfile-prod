# -----------------------------
# 1) Build Stage
# -----------------------------
FROM eclipse-temurin:17-jdk-alpine AS builder

# 작업 디렉터리 설정
WORKDIR /app

# Gradle 캐시 최적화를 위해 관련 파일 먼저 복사
COPY build.gradle settings.gradle gradlew ./
COPY gradle/ ./gradle/

# gradlew 실행 권한 부여
RUN chmod +x gradlew

# 의존성 캐싱을 위한 빌드 실행 (dry-run 사용)
RUN ./gradlew --no-daemon build --dry-run || true

# 이후 소스 코드 전체 복사
COPY src ./src

# 빌드 (테스트 제외)
RUN ./gradlew --no-daemon clean build -x test --parallel --build-cache

# -----------------------------
# 2) Runtime Stage
# -----------------------------
FROM eclipse-temurin:17-jre-alpine

# 작업 디렉터리 설정
WORKDIR /app

# Lighthouse 및 Chromium 관련 패키지 설치
# Ubuntu 환경에서는 apt를 사용하지만, Alpine에서는 apk를 사용합니다
RUN apk update && apk add --no-cache \
    nodejs \
    npm \
    chromium \
    chromium-swiftshader \
    harfbuzz \
    nss \
    freetype \
    ttf-freefont \
    font-noto-emoji \
    udev \
    ttf-opensans \
    dbus \
    dbus-x11 \
    && rm -rf /var/cache/apk/*

# Lighthouse 전역 설치
RUN npm install -g lighthouse

# Chromium 실행 파일 및 관련 디렉토리에 실행 권한 부여
# 이 부분이 이전에 EACCES 오류를 해결했던 핵심 부분입니다
RUN chmod -R 755 /usr/bin/chromium-browser \
    && chmod -R 755 /usr/lib/chromium/ \
    && ln -sf /usr/bin/chromium-browser /usr/bin/chromium

# Lighthouse 결과를 저장할 디렉토리 생성 및 권한 설정
RUN mkdir -p /tmp/lighthouse && chmod 777 /tmp/lighthouse

# Chrome 환경 변수 설정
# 정확한 실행 파일 경로를 지정하는 것이 중요합니다
ENV CHROME_BIN=/usr/bin/chromium-browser
ENV CHROME_PATH=/usr/bin/chromium-browser
ENV LIGHTHOUSE_CHROMIUM_PATH=/usr/bin/chromium-browser
ENV NODE_PATH=/usr/lib/node_modules

# Shared memory 확보 (Chrome이 필요로 함)
RUN mkdir -p /dev/shm && chmod 777 /dev/shm

# DBus 설정 (시스템 서비스와의 통신을 위해 필요)
RUN mkdir -p /var/run/dbus && chmod 755 /var/run/dbus
ENV DBUS_SESSION_BUS_ADDRESS=unix:path=/var/run/dbus/system_bus_socket

# Chrome 플래그 설정 - GPU 없는 환경에서도 작동하도록 설정
# 이전에 발생했던 Vulkan 드라이버 오류를 방지합니다
ENV CHROME_FLAGS="--headless --disable-gpu --no-sandbox --disable-dev-shm-usage --disable-software-rasterizer --disable-setuid-sandbox --disable-features=VizDisplayCompositor --disable-vulkan"

# 빌드된 JAR 파일 복사
COPY --from=builder /app/build/libs/pwandora-0.0.1-SNAPSHOT.jar app.jar

# 디버깅을 위한 볼륨 설정 (옵션)
VOLUME ["/tmp/lighthouse"]

# 컨테이너 시작 시 DBus 서비스를 먼저 실행한 후 애플리케이션 실행
# 컨테이너 환경에 최적화된 JVM 옵션 추가
ENTRYPOINT sh -c "dbus-daemon --system --address=unix:path=/var/run/dbus/system_bus_socket & java -XX:+UseContainerSupport -jar app.jar"